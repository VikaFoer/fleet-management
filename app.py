from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import io
import json

load_dotenv()

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SECRET_KEY
secret_key = os.getenv('SECRET_KEY')
if not secret_key:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SECRET_KEY –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    import secrets
    secret_key = secrets.token_hex(32)
    print(f"Generated SECRET_KEY: {secret_key[:16]}...")
app.config['SECRET_KEY'] = secret_key

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
database_url = os.getenv('DATABASE_URL')
print(f"Database URL from env: {database_url}")

# –î–ª—è Railway PostgreSQL
if database_url and database_url.startswith('postgres://'):
    database_url = database_url.replace('postgres://', 'postgresql://', 1)

if database_url and (database_url.startswith('sqlite://') or database_url.startswith('postgresql://') or database_url.startswith('mysql://')):
    app.config['SQLALCHEMY_DATABASE_URI'] = database_url
else:
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///fleet.db'

print(f"Final Database URI: {app.config['SQLALCHEMY_DATABASE_URI']}")
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
db_initialized = False

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    role = db.Column(db.String(20), default='user')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Vehicle(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    brand = db.Column(db.String(50), nullable=False)  # –ú–∞—Ä–∫–∞
    model = db.Column(db.String(50), nullable=False)  # –ú–æ–¥–µ–ª—å
    year = db.Column(db.Integer, nullable=False)  # –ì–æ–¥
    engine_volume = db.Column(db.Float)  # –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
    vin_code = db.Column(db.String(17), unique=True, nullable=False)  # VIN –∫–æ–¥
    license_plate = db.Column(db.String(20), unique=True, nullable=False)  # –ì–æ—Å–Ω–æ–º–µ—Ä
    call_sign = db.Column(db.String(20), unique=True, nullable=False)  # –ü–æ–∑—ã–≤–Ω–æ–π
    mileage = db.Column(db.Integer, default=0)  # –ü—Ä–æ–±–µ–≥
    last_to_date = db.Column(db.Date)  # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û (–∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π)
    breakdown_history = db.Column(db.Text)  # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª–æ–º–æ–∫ (–∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π)
    cost = db.Column(db.Float, default=0)  # –°—Ç–æ–∏–º–æ—Å—Ç—å
    payback_weeks = db.Column(db.Integer)  # –ù–µ–¥–µ–ª—å –¥–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
    payment_history = db.Column(db.Text)  # –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (–∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π)
    status = db.Column(db.String(20), default='active')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class CashFlow(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)  # –î–∞—Ç–∞
    income = db.Column(db.Float, default=0)  # –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è
    expenses = db.Column(db.Float, default=0)  # –í–∏–¥–∞—Ç–∫–∏
    balance = db.Column(db.Float, default=0)  # –°–∞–ª—å–¥–æ
    credit_load = db.Column(db.Float, default=0)  # –ö—Ä–µ–¥–∏—Ç–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Contractor(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    contractor_type = db.Column(db.String(50), nullable=False)  # –¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    subtype = db.Column(db.String(100))  # –ü—ñ–¥—Ç–∏–ø
    name = db.Column(db.String(200), nullable=False)  # –ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è
    phone = db.Column(db.String(20))  # –¢–µ–ª–µ—Ñ–æ–Ω
    location = db.Column(db.String(200))  # –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è
    notes = db.Column(db.Text)  # –ü—Ä–∏–º—ñ—Ç–∫–∏
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class EventJournal(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)  # –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è
    event_type = db.Column(db.String(50), nullable=False)  # –¢–ò–ü —Å–æ–±—ã—Ç–∏—è
    subtype = db.Column(db.String(100), nullable=False)  # –ü–Ü–î–¢–ò–ü —Å–æ–±—ã—Ç–∏—è
    vehicle_id = db.Column(db.Integer, db.ForeignKey('vehicle.id'))  # –û–ë'–Ñ–ö–¢ (–¢–°)
    contractor_id = db.Column(db.Integer, db.ForeignKey('contractor.id'))  # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç
    amount = db.Column(db.Float, default=0)  # –°—É–º–º–∞
    description = db.Column(db.Text)  # –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    vehicle = db.relationship('Vehicle', backref='events')
    contractor = db.relationship('Contractor', backref='events')
    user = db.relationship('User', backref='events')

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    with app.app_context():
        try:
            print("üóÑÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            print("üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            admin = User.query.filter_by(username='admin').first()
            if not admin:
                admin = User(
                    username='admin',
                    email='admin@fleet.com',
                    password_hash=generate_password_hash('admin123'),
                    role='admin'
                )
                db.session.add(admin)
                db.session.commit()
                print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin/admin123")
            else:
                print("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
            print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            db.session.rollback()
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Railway)
if not os.getenv('RAILWAY_ENVIRONMENT'):
    init_database()
    db_initialized = True

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
EVENT_TYPES = [
    '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó', '–≤–∏–¥–∞—Ç–∫–∏', '–Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è', '–¥–µ—Ä–∂–∞–≤–Ω—ñ'
]

EVENT_SUBTYPES = {
    '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó': ['–õ–Ü–ó–ò–ù–ì', '–ü–û–ö–£–ü–ö–ê', '–ì–û–¢–Ü–í–ö–ê', '–û–ë–õ–ê–î–ù–ê–ù–ù–Ø', '–ö–†–ï–î–ò–¢'],
    '–≤–∏–¥–∞—Ç–∫–∏': ['–ü–û–°–¢–ê–ù–û–í–ö–ê –ù–ê –¢–û', '–ü–û–õ–û–ú–ö–ê', '–ü–õ–ê–ù–û–í–ò–ô –†–ï–ú–û–ù–¢', '–ü–û–ó–ê–ü–õ–ê–ù–û–í–ò–ô –†–ï–ú–û–ù–¢', '–ó–ê–†–ü–õ–ê–¢–ê', '–õ–û–ì–Ü–°–¢–ò–ö–ê', '–î–¢–ü'],
    '–Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è': ['–û–†–ï–ù–î–ê', '–ó–ê–í–î–ê–¢–û–ö', '–ö–û–ú–ü–ï–ù–°–ê–¶–Ü–Ø', '–ü–†–û–î–ê–ñ –ó–ê –†–û–ó–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø–ú', '–ü–†–û–î–ê–ñ'],
    '–¥–µ—Ä–∂–∞–≤–Ω—ñ': ['–î–û–ö–£–ú–ï–ù–¢–ò', '–®–¢–†–ê–§', '–°–¢–ê–•–£–í–ê–ù–ù–Ø', '–ü–û–î–ê–¢–ö–ò']
}

def update_cashflow_from_event(event_date, event_type, event_subtype, amount, operation='add'):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
    operation: 'add' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, 'remove' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
    event_date_only = event_date.date() if hasattr(event_date, 'date') else event_date
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    cashflow_entry = CashFlow.query.filter_by(date=event_date_only).first()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å: +1 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, -1 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    multiplier = 1 if operation == 'add' else -1
    adjusted_amount = amount * multiplier
    
    if cashflow_entry:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        if event_type in ['–Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è']:
            cashflow_entry.income += adjusted_amount
        elif event_type in ['–≤–∏–¥–∞—Ç–∫–∏', '–¥–µ—Ä–∂–∞–≤–Ω—ñ']:
            cashflow_entry.expenses += adjusted_amount
        elif event_type in ['—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if event_subtype == '–ö–†–ï–î–ò–¢':
                # –ö—Ä–µ–¥–∏—Ç—ã –∏–¥—É—Ç –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –Ω–∞–≥—Ä—É–∂–µ–Ω–∏–µ
                cashflow_entry.credit_load += adjusted_amount
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–¥—É—Ç –≤ —Ä–∞—Å—Ö–æ–¥—ã
                cashflow_entry.expenses += adjusted_amount
        elif event_type in ['–≤–∏–¥–∞—Ç–∫–∏', '–¥–µ—Ä–∂–∞–≤–Ω—ñ']:
            # –†–∞—Å—Ö–æ–¥—ã –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–¥—É—Ç –≤ —Ä–∞—Å—Ö–æ–¥—ã
            cashflow_entry.expenses += adjusted_amount
        elif event_type in ['–Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è']:
            # –î–æ—Ö–æ–¥—ã –∏–¥—É—Ç –≤ –¥–æ—Ö–æ–¥—ã
            cashflow_entry.income += adjusted_amount
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        cashflow_entry.balance = cashflow_entry.income - cashflow_entry.expenses - cashflow_entry.credit_load
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å—É–º–º—ã —Å—Ç–∞–ª–∏ 0, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if cashflow_entry.income == 0 and cashflow_entry.expenses == 0 and cashflow_entry.credit_load == 0:
            db.session.delete(cashflow_entry)
    else:
        if operation == 'add':
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            income = amount if event_type in ['–Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è'] else 0
            expenses = amount if event_type in ['–≤–∏–¥–∞—Ç–∫–∏', '–¥–µ—Ä–∂–∞–≤–Ω—ñ'] else 0
            credit_load = amount if event_type in ['—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó'] and event_subtype == '–ö–†–ï–î–ò–¢' else 0
            investment_expenses = amount if event_type in ['—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó'] and event_subtype != '–ö–†–ï–î–ò–¢' else 0
            
            cashflow_entry = CashFlow(
                date=event_date_only,
                income=income,
                expenses=expenses + investment_expenses,
                credit_load=credit_load,
                balance=income - expenses - investment_expenses - credit_load
            )
            db.session.add(cashflow_entry)
    
    db.session.commit()
    return cashflow_entry

CONTRACTOR_TYPES = [
    '–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫', '–°–¢–û', '–û—Ä–µ–Ω–¥–∞—Ä', '–ü—Ä–æ–¥–∞–≤–µ—Ü—å', '–õ—ñ–∑–∏–Ω–≥–æ–¥–∞–≤–µ—Ü—å', 
    '–ë–∞–Ω–∫', '–ü–æ–∫—É–ø–µ—Ü—å', '–ü–æ—Å–ª—É–≥–∏', '–î–µ—Ä–∂–∞–≤–Ω—ñ —É—Å—Ç–∞–Ω–æ–≤–∏'
]

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    global db_initialized
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if not db_initialized:
        try:
            init_database()
            db_initialized = True
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    try:
        if current_user.is_authenticated:
            return redirect(url_for('dashboard'))
        return render_template('index.html')
    except Exception as e:
        print(f"Error in index route: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    return jsonify({
        'status': 'healthy', 
        'timestamp': datetime.utcnow(),
        'message': 'Application is running'
    })

@app.route('/init-db')
def init_db_route():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        init_database()
        return jsonify({
            'status': 'success',
            'message': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}'
        }), 500

@app.errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return jsonify({'error': 'Internal server error'}), 500

@app.errorhandler(404)
def not_found_error(error):
    return jsonify({'error': 'Not found'}), 404

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        try:
            username = request.form['username']
            password = request.form['password']
            user = User.query.filter_by(username=username).first()
            
            if user and check_password_hash(user.password_hash, password):
                login_user(user)
                return redirect(url_for('dashboard'))
            else:
                flash('–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å', 'error')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
            flash('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error')
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/dashboard')
@login_required
def dashboard():
    vehicles = Vehicle.query.all()
    recent_events = EventJournal.query.order_by(EventJournal.date.desc()).limit(10).all()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_vehicles = len(vehicles)
    active_vehicles = len([v for v in vehicles if v.status == 'active'])
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    latest_events = EventJournal.query.join(Vehicle).order_by(EventJournal.date.desc()).limit(5).all()
    
    return render_template('dashboard.html', 
                         vehicles=vehicles,
                         recent_events=recent_events,
                         total_vehicles=total_vehicles,
                         active_vehicles=active_vehicles,
                         latest_events=latest_events)

@app.route('/vehicles')
@login_required
def vehicles():
    vehicles = Vehicle.query.all()
    return render_template('vehicles.html', vehicles=vehicles)

@app.route('/vehicles/add', methods=['GET', 'POST'])
@login_required
def add_vehicle():
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º, –ø–æ–∑—ã–≤–Ω—ã–º –∏–ª–∏ VIN-–∫–æ–¥–æ–º
        print(f"DEBUG: Checking for license_plate: '{request.form['license_plate']}'")
        print(f"DEBUG: Checking for call_sign: '{request.form['call_sign']}'")
        print(f"DEBUG: Checking for vin_code: '{request.form['vin_code']}'")
        
        existing_license = Vehicle.query.filter_by(license_plate=request.form['license_plate']).first()
        existing_call_sign = Vehicle.query.filter_by(call_sign=request.form['call_sign']).first()
        existing_vin = Vehicle.query.filter_by(vin_code=request.form['vin_code']).first()
        
        print(f"DEBUG: existing_license: {existing_license}")
        print(f"DEBUG: existing_call_sign: {existing_call_sign}")
        print(f"DEBUG: existing_vin: {existing_vin}")
        
        if existing_license:
            flash(f'–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –∑ –Ω–æ–º–µ—Ä–æ–º {request.form["license_plate"]} –≤–∂–µ —ñ—Å–Ω—É—î!', 'error')
            return render_template('add_vehicle.html')
        
        if existing_call_sign:
            flash(f'–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –∑ –ø–æ–∑–∏–≤–Ω–∏–º {request.form["call_sign"]} –≤–∂–µ —ñ—Å–Ω—É—î!', 'error')
            return render_template('add_vehicle.html')
        
        if existing_vin:
            flash(f'–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –∑ VIN-–∫–æ–¥–æ–º {request.form["vin_code"]} –≤–∂–µ —ñ—Å–Ω—É—î!', 'error')
            return render_template('add_vehicle.html')
        
        try:
            print(f"DEBUG: Creating vehicle with VIN: '{request.form['vin_code']}'")
            vehicle = Vehicle(
                brand=request.form['brand'],
                model=request.form['model'],
                year=int(request.form['year']),
                engine_volume=float(request.form['engine_volume']) if request.form['engine_volume'] else None,
                vin_code=request.form['vin_code'],
                license_plate=request.form['license_plate'],
                call_sign=request.form['call_sign'],
                mileage=int(request.form['mileage']) if request.form['mileage'] else 0,
                cost=float(request.form['cost']) if request.form['cost'] else 0
            )
            print(f"DEBUG: Vehicle object created, adding to session...")
            db.session.add(vehicle)
            print(f"DEBUG: Committing to database...")
            db.session.commit()
            print(f"DEBUG: Successfully committed!")
            flash('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–± –¥–æ–¥–∞–Ω–æ', 'success')
            return redirect(url_for('vehicles'))
        except Exception as e:
            print(f"DEBUG: Exception occurred: {type(e).__name__}: {str(e)}")
            db.session.rollback()
            flash(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è: {str(e)}', 'error')
            return render_template('add_vehicle.html')
    
    return render_template('add_vehicle.html')

@app.route('/events')
@login_required
def events():
    events = EventJournal.query.join(Vehicle).join(Contractor, isouter=True).order_by(EventJournal.date.desc()).all()
    return render_template('events.html', events=events)

@app.route('/events/add', methods=['GET', 'POST'])
@login_required
def add_event():
    if request.method == 'POST':
        # –ì–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ YYYY-MM-DD, —Ç–∞–∫ –∏ YYYY-MM-DDTHH:MM
        date_str = request.form['date']
        print(f"DEBUG: Received date string: '{date_str}'")
        try:
            if 'T' in date_str:
                event_date = datetime.strptime(date_str, '%Y-%m-%dT%H:%M')
            else:
                event_date = datetime.strptime(date_str, '%Y-%m-%d')
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            event_date = datetime.now()
            
        amount = float(request.form['amount']) if request.form['amount'] else 0
        
        event = EventJournal(
            date=event_date,
            event_type=request.form['event_type'],
            subtype=request.form['subtype'],
            vehicle_id=int(request.form['vehicle_id']) if request.form['vehicle_id'] else None,
            contractor_id=int(request.form['contractor_id']) if request.form['contractor_id'] else None,
            amount=amount,
            description=request.form['description'],
            created_by=current_user.id
        )
        db.session.add(event)
        db.session.commit()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫
        if amount > 0:
            try:
                update_cashflow_from_event(event_date, request.form['event_type'], request.form['subtype'], amount)
                flash('–ü–æ–¥—ñ—é –¥–æ–¥–∞–Ω–æ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä–æ—à–æ–≤–∏–π –ø–æ—Ç—ñ–∫', 'success')
            except Exception as e:
                flash(f'–ü–æ–¥—ñ—é –¥–æ–¥–∞–Ω–æ, –∞–ª–µ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≥—Ä–æ—à–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É: {str(e)}', 'warning')
        else:
            flash('–ü–æ–¥—ñ—é –¥–æ–¥–∞–Ω–æ', 'success')
            
        return redirect(url_for('events'))
    
    vehicles = Vehicle.query.all()
    contractors = Contractor.query.all()
    return render_template('add_event.html', 
                         vehicles=vehicles, 
                         contractors=contractors,
                         event_types=EVENT_TYPES,
                         event_subtypes=EVENT_SUBTYPES)

@app.route('/events/delete/<int:event_id>', methods=['POST'])
@login_required
def delete_event(event_id):
    event = EventJournal.query.get_or_404(event_id)
    
    try:
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
        if event.amount > 0:
            update_cashflow_from_event(event.date, event.event_type, event.subtype, event.amount, 'remove')
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        db.session.delete(event)
        db.session.commit()
        flash('–ü–æ–¥—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä–æ—à–æ–≤–∏–π –ø–æ—Ç—ñ–∫', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó: {str(e)}', 'error')
    
    return redirect(url_for('events'))

@app.route('/events/by_contractor/<int:contractor_id>')
@login_required
def events_by_contractor(contractor_id):
    contractor = Contractor.query.get_or_404(contractor_id)
    events = EventJournal.query.filter_by(contractor_id=contractor_id).order_by(EventJournal.date.desc()).all()
    return render_template('events_by_contractor.html', events=events, contractor=contractor)

@app.route('/events/by_vehicle/<int:vehicle_id>')
@login_required
def events_by_vehicle(vehicle_id):
    vehicle = Vehicle.query.get_or_404(vehicle_id)
    events = EventJournal.query.filter_by(vehicle_id=vehicle_id).order_by(EventJournal.date.desc()).all()
    return render_template('events_by_vehicle.html', events=events, vehicle=vehicle)

@app.route('/contractors')
@login_required
def contractors():
    contractors = Contractor.query.all()
    return render_template('contractors.html', contractors=contractors)

@app.route('/contractors/add', methods=['GET', 'POST'])
@login_required
def add_contractor():
    if request.method == 'POST':
        contractor = Contractor(
            contractor_type=request.form['contractor_type'],
            subtype=request.form['subtype'],
            name=request.form['name'],
            phone=request.form['phone'],
            location=request.form['location'],
            notes=request.form['notes']
        )
        db.session.add(contractor)
        db.session.commit()
        flash('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ', 'success')
        return redirect(url_for('contractors'))
    
    return render_template('add_contractor.html', contractor_types=CONTRACTOR_TYPES)

@app.route('/cashflow')
@login_required
def cashflow():
    cashflow_entries = CashFlow.query.order_by(CashFlow.date.desc()).all()
    return render_template('cashflow.html', cashflow_entries=cashflow_entries)

@app.route('/cashflow/add', methods=['GET', 'POST'])
@login_required
def add_cashflow():
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        entry_date = datetime.strptime(request.form['date'], '%Y-%m-%d').date()
        existing_entry = CashFlow.query.filter_by(date=entry_date).first()
        
        if existing_entry:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            existing_entry.income += float(request.form['income']) if request.form['income'] else 0
            existing_entry.expenses += float(request.form['expenses']) if request.form['expenses'] else 0
            existing_entry.credit_load += float(request.form['credit_load']) if request.form['credit_load'] else 0
            existing_entry.balance = existing_entry.income - existing_entry.expenses - existing_entry.credit_load
            flash('–ó–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ', 'success')
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cashflow = CashFlow(
                date=entry_date,
                income=float(request.form['income']) if request.form['income'] else 0,
                expenses=float(request.form['expenses']) if request.form['expenses'] else 0,
                credit_load=float(request.form['credit_load']) if request.form['credit_load'] else 0
            )
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å–∞–ª—å–¥–æ
            cashflow.balance = cashflow.income - cashflow.expenses - cashflow.credit_load
            db.session.add(cashflow)
            flash('–ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ', 'success')
        
        db.session.commit()
        return redirect(url_for('cashflow'))
    
    return render_template('add_cashflow.html')

@app.route('/documents')
@login_required
def documents():
    return render_template('documents.html')

@app.route('/generate_report/<report_type>')
@login_required
def generate_report(report_type):
    if report_type == 'vehicles':
        vehicles = Vehicle.query.all()
        return generate_vehicles_report(vehicles)
    elif report_type == 'events':
        events = EventJournal.query.join(Vehicle).join(Contractor, isouter=True).all()
        return generate_events_report(events)
    elif report_type == 'cashflow':
        cashflow_entries = CashFlow.query.all()
        return generate_cashflow_report(cashflow_entries)
    
    return redirect(url_for('documents'))

def generate_vehicles_report(vehicles):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    story = []
    
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30
    )
    
    story.append(Paragraph("–û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º", title_style))
    story.append(Spacer(1, 12))
    
    data = [['–ü–æ–∑—ã–≤–Ω–æ–π', '–ú–∞—Ä–∫–∞', '–ú–æ–¥–µ–ª—å', '–ì–æ–¥', '–ì–æ—Å. –Ω–æ–º–µ—Ä', '–ü—Ä–æ–±–µ–≥', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å']]
    for vehicle in vehicles:
        data.append([
            vehicle.call_sign,
            vehicle.brand,
            vehicle.model,
            str(vehicle.year),
            vehicle.license_plate,
            f"{vehicle.mileage:,} –∫–º",
            f"{vehicle.cost:,.2f} ‚ÇΩ",
            vehicle.status
        ])
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    doc.build(story)
    
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name='vehicles_report.pdf')

def generate_events_report(events):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    story = []
    
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30
    )
    
    story.append(Paragraph("–û—Ç—á–µ—Ç –ø–æ —Å–æ–±—ã—Ç–∏—è–º", title_style))
    story.append(Spacer(1, 12))
    
    data = [['–î–∞—Ç–∞', '–¢–∏–ø', '–ü–æ–¥—Ç–∏–ø', '–¢–°', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–°—É–º–º–∞', '–û–ø–∏—Å–∞–Ω–∏–µ']]
    for event in events:
        data.append([
            event.date.strftime('%d.%m.%Y'),
            event.event_type,
            event.subtype,
            event.vehicle.call_sign if event.vehicle else '-',
            event.contractor.name if event.contractor else '-',
            f"{event.amount:,.2f} ‚ÇΩ",
            event.description[:50] + '...' if event.description and len(event.description) > 50 else event.description or '-'
        ])
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    doc.build(story)
    
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name='events_report.pdf')

def generate_cashflow_report(cashflow_entries):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    story = []
    
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30
    )
    
    story.append(Paragraph("–û—Ç—á–µ—Ç –ø–æ –¥–µ–Ω–µ–∂–Ω—ã–º –ø–æ—Ç–æ–∫–∞–º", title_style))
    story.append(Spacer(1, 12))
    
    data = [['–î–∞—Ç–∞', '–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è', '–í–∏–¥–∞—Ç–∫–∏', '–ö—Ä–µ–¥–∏—Ç–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è', '–°–∞–ª—å–¥–æ']]
    for entry in cashflow_entries:
        data.append([
            entry.date.strftime('%d.%m.%Y'),
            f"{entry.income:,.2f} ‚ÇΩ",
            f"{entry.expenses:,.2f} ‚ÇΩ",
            f"{entry.credit_load:,.2f} ‚ÇΩ",
            f"{entry.balance:,.2f} ‚ÇΩ"
        ])
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    doc.build(story)
    
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name='cashflow_report.pdf')

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def init_db():
    with app.app_context():
        try:
            db.create_all()
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            admin = User.query.filter_by(username='admin').first()
            if not admin:
                admin = User(
                    username='admin',
                    email='admin@fleet.com',
                    password_hash=generate_password_hash('admin123'),
                    role='admin'
                )
                db.session.add(admin)
                db.session.commit()
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            db.session.rollback() 